@using DestinyTrail.Engine
@using DestinyTrail.Blazor.Components
@using DestinyTrail.Engine.Abstractions
@inject HttpClient HttpClient

<h3>MainGame</h3>

<BlazorDisplay Heading="Output" @ref="outputDisplay"></BlazorDisplay>

<BlazorDisplay Heading="Status" @ref="statusDisplay"></BlazorDisplay>


@code {


    private Game? game { get; set; }
    private BlazorDisplay? outputDisplay;
    private BlazorDisplay? statusDisplay;
    private bool isGameInitialized = false;
    private bool _running = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isGameInitialized)
        {
            if (outputDisplay == null || statusDisplay == null)
            {
                throw new InvalidOperationException("Blazor displays are not initialized.");
            }

            var worldStatus = new WorldStatus();
            var configurationProvider = new DestinyTrail.Blazor.ConfigurationProvider();
            var fileReader = new DestinyTrail.Blazor.FileReader(HttpClient);
            var utility = new Utility(new YamlDeserializer(), fileReader, configurationProvider);
            var wagonParty = await WagonParty.CreateAsync(utility);
            var travel = await Travel.CreateAsync(wagonParty, utility, statusDisplay, worldStatus);
            game = await Game.CreateAsync(outputDisplay, statusDisplay, utility, wagonParty, travel, worldStatus);
            await game.StartGameLoop();
        }
    }
}